# -*- coding: utf-8 -*-
"""wine prediction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kupoXWk9js5lXcRf3wMWxoSYTpFWFkcp

import the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data collection"""

#loading the dataset to pandas data frame
wine_dataset = pd.read_csv('/content/WineQT.csv')

#number of the rows and cthe columns in the dataset
wine_dataset.shape

#first 5 rows of the dataset
wine_dataset.head()

#checking for missing values
wine_dataset.isnull().sum()

"""Data analysis visualization"""

# statistical measure of the dataset
wine_dataset.describe()

#number of values for each quality
sns.catplot(x='quality', data=wine_dataset, kind='count')

#volatile acidity vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='volatile acidity', data = wine_dataset)

#citric acidity vs quality
plot = plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='citric acid', data = wine_dataset)

"""correlation"""

correlation = wine_dataset.corr()

"""

1.   positive correlation
2.   negative correlation

"""

correlation = wine_dataset.corr()

#constructing a heatmap to undestand the corr between the columns
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""data preprocessing"""

#separate the data and label
x = wine_dataset.drop('quality', axis=1)
print(x)



"""label binarization"""

y = wine_dataset['quality'].apply(lambda y_value: 1 if y_value>=7 else 0)
print(y)

"""train and test"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=3)
print(y.shape, y_train.shape, y_test.shape)

"""model training
Random forest classifier:-ensemble model that uses more than two or three model in combinations for predictions
"""

model = RandomForestClassifier()

model.fit(x_train, y_train)

"""model evaluations
Accuracy score
"""

#accuracy on test data
x_test_prediction = model.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy:', test_data_accuracy)

"""Building a Predictive system


"""

input_data = (7.3,0.65,0.0,1.2,0.065,15.0,21.0,0.9946,3.39,0.47,10.0,7.0)

#changing the input to the numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the data as we are predicting for the one value
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]==1):
  print("Good Quality Wine")
else:
  print("Bad Quality Wine")